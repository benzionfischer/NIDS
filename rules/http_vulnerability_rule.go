package rules

import (
	. "awesomeProject/model"
	"strings"
)

// HttpVulnerabilityRule implements the Rule interface to detect HTTP vulnerabilities.
type HttpVulnerabilityRule struct{}

// NewHttpVulnerabilityRule initializes and returns a new instance of HttpVulnerabilityRule.
func NewHttpVulnerabilityRule() *HttpVulnerabilityRule {
	return &HttpVulnerabilityRule{}
}

// Detect analyzes the packet for specific HTTP vulnerabilities.
func (r *HttpVulnerabilityRule) Detect(packet *Packet) []*Incident {

	incidents := []*Incident{}
	if packet.Length == 0 {
		return incidents
	}

	// Example checks for vulnerability patterns in the packet
	payload := packet.Payload

	// Check for SQL injection patterns
	if strings.Contains(payload, "' OR '1'='1'") || strings.Contains(payload, "SELECT * FROM") {
		incidents = append(incidents, NewIncident(packet.SrcIP, SQLInjection, packet.Timestamp))
	}

	// Check for file read attempts
	if strings.Contains(payload, "/etc/passwd") || strings.Contains(payload, "file=") {
		incidents = append(incidents, NewIncident(packet.SrcIP, FileRead, packet.Timestamp))
	}

	// Check for code execution attempts
	if strings.Contains(payload, "eval(") || strings.Contains(payload, "exec(") {
		incidents = append(incidents, NewIncident(packet.SrcIP, CodeExecution, packet.Timestamp))
	}

	return incidents
}
